/*
 * 2848869
 * 8089098
 * 3861852
 */
package filemanagement

import (
	"fmt"
	"github.com/estellegraef/Strava_Light/resources"
	"github.com/stretchr/testify/assert"
	"path/filepath"
	"strings"
	"testing"
)

var bytes = []byte {60, 63, 120, 109, 108, 32, 118, 101, 114, 115, 105, 111, 110, 61, 34, 49, 46, 48, 34, 32, 101, 110, 99, 111, 100, 105, 110, 103,
	61, 34, 85, 84, 70, 45, 56, 34, 63, 62, 13, 10, 60, 103, 112, 120, 32, 118, 101, 114, 115, 105, 111, 110, 61, 34, 49, 46, 49, 34, 32, 99, 114, 101, 97,
	116, 111, 114, 61, 34, 85, 114, 98, 97, 110, 32, 66, 105, 107, 101, 114, 34, 32, 120, 115, 105, 58, 115, 99, 104, 101, 109, 97, 76, 111, 99, 97, 116,
	105, 111, 110, 61, 34, 104, 116, 116, 112, 58, 47, 47, 119, 119, 119, 46, 116, 111, 112, 111, 103, 114, 97, 102, 105, 120, 46, 99, 111, 109, 47, 71,
	80, 88, 47, 49, 47, 49, 32, 104, 116, 116, 112, 58, 47, 47, 119, 119, 119, 46, 116, 111, 112, 111, 103, 114, 97, 102, 105, 120, 46, 99, 111, 109, 47,
	71, 80, 88, 47, 49, 47, 49, 47, 103, 112, 120, 46, 120, 115, 100, 32, 104, 116, 116, 112, 58, 47, 47, 119, 119, 119, 46, 103, 97, 114, 109, 105, 110,
	46, 99, 111, 109, 47, 120, 109, 108, 115, 99, 104, 101, 109, 97, 115, 47, 71, 112, 120, 69, 120, 116, 101, 110, 115, 105, 111, 110, 115, 47, 118, 51,
	32, 104, 116, 116, 112, 58, 47, 47, 119, 119, 119, 46, 103, 97, 114, 109, 105, 110, 46, 99, 111, 109, 47, 120, 109, 108, 115, 99, 104, 101, 109, 97,
	115, 47, 71, 112, 120, 69, 120, 116, 101, 110, 115, 105, 111, 110, 115, 118, 51, 46, 120, 115, 100, 32, 104, 116, 116, 112, 58, 47, 47, 119, 119, 119,
	46, 103, 97, 114, 109, 105, 110, 46, 99, 111, 109, 47, 120, 109, 108, 115, 99, 104, 101, 109, 97, 115, 47, 84, 114, 97, 99, 107, 80, 111, 105, 110, 116,
	69, 120, 116, 101, 110, 115, 105, 111, 110, 47, 118, 50, 32, 104, 116, 116, 112, 58, 47, 47, 119, 119, 119, 46, 103, 97, 114, 109, 105, 110, 46, 99, 111,
	109, 47, 120, 109, 108, 115, 99, 104, 101, 109, 97, 115, 47, 84, 114, 97, 99, 107, 80, 111, 105, 110, 116, 69, 120, 116, 101, 110, 115, 105, 111, 110,
	118, 50, 46, 120, 115, 100, 34, 32, 120, 109, 108, 110, 115, 61, 34, 104, 116, 116, 112, 58, 47, 47, 119, 119, 119, 46, 116, 111, 112, 111, 103, 114,
	97, 102, 105, 120, 46, 99, 111, 109, 47, 71, 80, 88, 47, 49, 47, 49, 34, 32, 120, 109, 108, 110, 115, 58, 103, 112, 120, 116, 112, 120, 61, 34, 104, 116,
	116, 112, 58, 47, 47, 119, 119, 119, 46, 103, 97, 114, 109, 105, 110, 46, 99, 111, 109, 47, 120, 109, 108, 115, 99, 104, 101, 109, 97, 115, 47, 84, 114,
	97, 99, 107, 80, 111, 105, 110, 116, 69, 120, 116, 101, 110, 115, 105, 111, 110, 47, 118, 50, 34, 32, 120, 109, 108, 110, 115, 58, 103, 112, 120, 112,
	120, 61, 34, 104, 116, 116, 112, 58, 47, 47, 119, 119, 119, 46, 103, 97, 114, 109, 105, 110, 46, 99, 111, 109, 47, 120, 109, 108, 115, 99, 104, 101, 109,
	97, 115, 47, 80, 111, 119, 101, 114, 69, 120, 116, 101, 110, 115, 105, 111, 110, 118, 49, 46, 120, 115, 100, 34, 32, 120, 109, 108, 110, 115, 58, 103,
	112, 120, 120, 61, 34, 104, 116, 116, 112, 58, 47, 47, 119, 119, 119, 46, 103, 97, 114, 109, 105, 110, 46, 99, 111, 109, 47, 120, 109, 108, 115, 99,
	104, 101, 109, 97, 115, 47, 71, 112, 120, 69, 120, 116, 101, 110, 115, 105, 111, 110, 115, 47, 118, 51, 34, 32, 120, 109, 108, 110, 115, 58, 120, 115,
	105, 61, 34, 104, 116, 116, 112, 58, 47, 47, 119, 119, 119, 46, 119, 51, 46, 111, 114, 103, 47, 50, 48, 48, 49, 47, 88, 77, 76, 83, 99, 104, 101, 109,
	97, 45, 105, 110, 115, 116, 97, 110, 99, 101, 34, 62, 13, 10, 13, 10, 60, 109, 101, 116, 97, 100, 97, 116, 97, 62, 13, 10, 60, 108, 105, 110, 107, 32,
	104, 114, 101, 102, 61, 34, 104, 116, 116, 112, 58, 47, 47, 119, 119, 119, 46, 117, 114, 98, 97, 110, 45, 98, 105, 107, 101, 45, 99, 111, 109, 112, 117,
	116, 101, 114, 46, 99, 111, 109, 47, 34, 62, 13, 10, 60, 116, 101, 120, 116, 62, 85, 114, 98, 97, 110, 32, 66, 105, 107, 101, 114, 60, 47, 116, 101, 120,
	116, 62, 13, 10, 60, 47, 108, 105, 110, 107, 62, 13, 10, 60, 116, 105, 109, 101, 62, 50, 48, 49, 57, 45, 48, 57, 45, 49, 52, 84, 49, 51, 58, 49, 52, 58, 49,
	55, 46, 48, 57, 52, 90, 60, 47, 116, 105, 109, 101, 62, 13, 10, 60, 47, 109, 101, 116, 97, 100, 97, 116, 97, 62, 13, 10, 13, 10, 60, 116, 114, 107, 62, 13,
	10, 60, 110, 97, 109, 101, 62, 67, 117, 98, 101, 32, 226, 128, 147, 32, 83, 97, 46, 44, 32, 49, 52, 46, 32, 83, 101, 112, 46, 32, 50, 48, 49, 57, 44, 32, 49,
	53, 58, 49, 52, 60, 47, 110, 97, 109, 101, 62, 13, 10, 60, 116, 114, 107, 115, 101, 103, 62, 13, 10, 60, 116, 114, 107, 112, 116, 32, 108, 97, 116, 61, 34,
	52, 57, 46, 51, 53, 52, 57, 56, 57, 48, 54, 48, 48, 34, 32, 108, 111, 110, 61, 34, 57, 46, 49, 53, 49, 57, 54, 52, 57, 52, 48, 48, 34, 62, 60, 101, 108, 101,
	62, 49, 55, 50, 46, 53, 48, 60, 47, 101, 108, 101, 62, 60, 116, 105, 109, 101, 62, 50, 48, 49, 57, 45, 48, 57, 45, 49, 52, 84, 49, 51, 58, 49, 52, 58, 51,
	48, 46, 50, 55, 54, 90, 60, 47, 116, 105, 109, 101, 62, 60, 101, 120, 116, 101, 110, 115, 105, 111, 110, 115, 62, 60, 103, 112, 120, 116, 112, 120, 58,
	84, 114, 97, 99, 107, 80, 111, 105, 110, 116, 69, 120, 116, 101, 110, 115, 105, 111, 110, 62, 60, 103, 112, 120, 116, 112, 120, 58, 97, 116, 101, 109,
	112, 62, 50, 50, 46, 56, 60, 47, 103, 112, 120, 116, 112, 120, 58, 97, 116, 101, 109, 112, 62, 60, 103, 112, 120, 116, 112, 120, 58, 115, 112, 101,
	101, 100, 62, 53, 46, 53, 52, 60, 47, 103, 112, 120, 116, 112, 120, 58, 115, 112, 101, 101, 100, 62, 60, 47, 103, 112, 120, 116, 112, 120, 58, 84, 114,
	97, 99, 107, 80, 111, 105, 110, 116, 69, 120, 116, 101, 110, 115, 105, 111, 110, 62, 60, 47, 101, 120, 116, 101, 110, 115, 105, 111, 110, 115, 62, 60, 47,
	116, 114, 107, 112, 116, 62, 13, 10, 60, 47, 116, 114, 107, 115, 101, 103, 62, 13, 10, 60, 47, 116, 114, 107, 62, 13, 10, 60, 47, 103, 112, 120, 62, 13, 10}

func TestGetAllFiles(t *testing.T) {
	actualDirs := GetAllFilesFromDir(resources.GetUserActivitiesPath())
	expectedDirs := []string{
		filepath.Join(resources.GetUserActivitiesPath(), "user1"),
		filepath.Join(resources.GetUserActivitiesPath(), "user2"),
	}
	assert.Equal(t, expectedDirs, actualDirs)
}

func TestGetSingleFileFromDir(t *testing.T) {
	actualDir := resources.GetUserDir("user1")
	expected := GetSingleFileFromDir(actualDir, "1", ".json")
	fmt.Print(expected)
}

func TestReadFileContent(t *testing.T) {
	gpxFile := resources.GetShortTestGpx()
	actualBytes, _ := ReadFile(gpxFile)
	assert.Equal(t, bytes, actualBytes)
}

func TestCreateFile(t *testing.T) {
	dir := resources.GetUserDir("user1")
	fileName := "TestCreateFile.txt"
	content := []byte("Hello")
	isCreated, createdFile := CreateFile(dir, fileName, content)
	assert.True(t, isCreated)
	assert.Equal(t, filepath.Join(dir, fileName), createdFile)
}

func TestDeleteFile(t *testing.T) {
	dir := resources.GetUserDir("user1")
	fileName := "TestCreateFile.txt"
	content := []byte("TestDelete")
	CreateFile(dir, fileName, content)
	isDeleted := DeleteFile(dir, fileName)
	assert.True(t, isDeleted)
}

func TestUpdateFile(t *testing.T) {
	dir := resources.GetUserDir("user1")
	fileName := "TestCreateFile.txt"
	content := []byte("Hello")
	newContent := []byte("Goodbye")
	isCreated, createdFile := CreateFile(dir, fileName, content)
	assert.True(t, isCreated)
	assert.Equal(t, filepath.Join(dir, fileName), createdFile)
	isUpdated := UpdateFile(dir, fileName, newContent)
	assert.True(t, isUpdated)
}

func TestGetAllFilesFromDir(t *testing.T) {
	dir := resources.GetUserDir("user2")
	actual := GetAllFilesFromDir(dir)
	expected := []string {filepath.Join(dir, ".gpx"), filepath.Join(dir, "3.json")}
	assert.Equal(t, expected, actual)
}

func TestReadReceiveFile(t *testing.T) {
	//TODO do when merged with frontend -- read multi file
}

func TestGenerateId(t *testing.T) {
	name := "originalFileName"
	actual := GenerateId(name)
	assert.True(t, strings.Contains(actual, name))
}